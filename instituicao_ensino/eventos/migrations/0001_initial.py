### Generated by Django 5.2.7 on 2025-10-09 08:30 ###

# Este arquivo foi gerado automaticamente pelo Django ao executar:
# python manage.py makemigrations
# Ele cria as tabelas e relacionamentos iniciais do aplicativo "eventos" no banco de dados.

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    # Indica que esta é a primeira migração do app (banco vazio até aqui)
    initial = True

    # Define dependências — neste caso, o modelo de usuário padrão do Django.
    # Isso é necessário porque usaremos uma ForeignKey para o usuário (AUTH_USER_MODEL).
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    # Lista de operações que serão aplicadas ao banco de dados
    operations = [
        # Cria a tabela "Evento" com os campos abaixo
        migrations.CreateModel(
            name="Evento",
            fields=[
                # Campo "id" gerado automaticamente como chave primária
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                # Título do evento (ex: "Semana da Computação")
                ("titulo", models.CharField(max_length=200)),

                # Tipo de realização do evento: online, presencial ou híbrido
                (
                    "modalidade",
                    models.CharField(
                        choices=[
                            ("online", "Online"),
                            ("presencial", "Presencial"),
                            ("hibrido", "Híbrido"),
                        ],
                        max_length=10,
                    ),
                ),

                # Datas de início e fim do evento
                ("data_inicio", models.DateField()),
                ("data_fim", models.DateField()),

                # Horário do evento (hora e minuto)
                ("horario", models.TimeField()),

                # Local físico do evento (opcional, por isso null=True e blank=True)
                ("local", models.CharField(blank=True, max_length=200, null=True)),

                # Link do evento (caso seja online, opcional também)
                ("link", models.URLField(blank=True, null=True)),

                # Quantidade máxima de participantes
                ("quantidade_participantes", models.PositiveIntegerField()),

                # Nome do organizador do evento
                ("organizador", models.CharField(max_length=200)),
            ],
        ),

        # Cria a tabela "TipoEvento", que serve para categorizar os eventos
        migrations.CreateModel(
            name="TipoEvento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                # Nome do tipo de evento (ex: "Palestra", "Workshop", "Feira")
                # unique=True impede que dois tipos tenham o mesmo nome.
                ("nome", models.CharField(max_length=50, unique=True)),
            ],
        ),

        # Cria a tabela "InscricaoEvento", que liga um usuário (aluno) a um evento
        migrations.CreateModel(
            name="InscricaoEvento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                # Data e hora em que a inscrição foi feita (adicionada automaticamente)
                ("data_inscricao", models.DateTimeField(auto_now_add=True)),

                # Campo que relaciona a inscrição ao aluno (usuário do sistema)
                # Se o usuário for deletado, suas inscrições também são removidas (CASCADE)
                (
                    "aluno",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),

                # Campo que relaciona a inscrição a um evento específico
                # Se o evento for deletado, as inscrições desse evento também são removidas
                (
                    "evento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventos.evento",
                    ),
                ),
            ],
        ),

        # Adiciona o campo "tipo" à tabela "Evento"
        migrations.AddField(
            model_name="evento",
            name="tipo",
            field=models.ForeignKey(
                # Cada evento pertence a um tipo (ex: Palestra, Curso, Seminário)
                # Se o tipo for deletado, todos os eventos desse tipo serão apagados também
                on_delete=django.db.models.deletion.CASCADE,
                to="eventos.tipoevento",
            ),
        ),
    ]
